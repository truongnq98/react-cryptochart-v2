{"version":3,"sources":["../../../src/lib/tooltip/RSITooltip.js"],"names":["RSITooltip","props","renderSVG","bind","moreProps","onClick","fontFamily","fontSize","yAccessor","displayFormat","className","interactiveMode","options","labelFill","textFill","displayValuesFor","chartConfig","width","height","currentItem","rsi","value","originProp","origin","x","y","tooltipLabel","windowSize","Component","propTypes","PropTypes","oneOfType","array","func","isRequired","shape","number","string","bool","defaultProps"],"mappings":"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","file":"RSITooltip.js","sourcesContent":["\n\nimport { format } from \"d3-format\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport displayValuesFor from \"./displayValuesFor\";\nimport GenericChartComponent from \"../GenericChartComponent\";\n\nimport { isDefined, functor } from \"../utils\";\nimport ToolTipText from \"./ToolTipText\";\nimport ToolTipTSpanLabel from \"./ToolTipTSpanLabel\";\n\nclass RSITooltip extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t}\n\trenderSVG(moreProps) {\n\t\tconst { onClick, fontFamily, fontSize, yAccessor, displayFormat, className, interactiveMode } = this.props;\n\t\tconst { options, labelFill, textFill } = this.props;\n\t\tconst { displayValuesFor } = this.props;\n\t\tconst { chartConfig: { width, height } } = moreProps;\n\n\t\tconst currentItem = displayValuesFor(this.props, moreProps);\n\t\tconst rsi = isDefined(currentItem) && yAccessor(currentItem);\n\t\tconst value = (rsi && displayFormat(rsi)) || \"n/a\";\n\n\t\tconst { origin: originProp } = this.props;\n\t\tconst origin = functor(originProp);\n\t\tconst [x, y] = origin(width, height);\n\n\t\tconst tooltipLabel = `RSI (${options.windowSize})${interactiveMode ? \": \" : \"\"}`;\n\t\treturn (\n\t\t\t<g className={className} transform={`translate(${ x }, ${ y })`} onClick={onClick}>\n\t\t\t\t<ToolTipText x={0} y={0}\n\t\t\t\t\tfontFamily={fontFamily} fontSize={fontSize}>\n\t\t\t\t\t<ToolTipTSpanLabel fill={labelFill}>{tooltipLabel}</ToolTipTSpanLabel>\n\t\t\t\t\t<tspan  fill={textFill}>{interactiveMode ? value : \"\"}</tspan>\n\t\t\t\t</ToolTipText>\n\t\t\t</g>\n\t\t);\n\t}\n\trender() {\n\t\treturn <GenericChartComponent\n\t\t\tclip={false}\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tdrawOn={[\"mousemove\"]}\n\t\t/>;\n\t}\n}\n\nRSITooltip.propTypes = {\n\torigin: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.func\n\t]).isRequired,\n\toptions: PropTypes.shape({\n\t\twindowSize: PropTypes.number.isRequired,\n\t}).isRequired,\n\tclassName: PropTypes.string,\n\tfontFamily: PropTypes.string,\n\tfontSize: PropTypes.number,\n\tonClick: PropTypes.func,\n\tyAccessor: PropTypes.func.isRequired,\n\tdisplayFormat: PropTypes.func.isRequired,\n\tdisplayValuesFor: PropTypes.func,\n\ttextFill: PropTypes.string,\n\tlabelFill: PropTypes.string,\n\tinteractiveMode: PropTypes.bool,\n};\n\nRSITooltip.defaultProps = {\n\tdisplayFormat: format(\".2f\"),\n\tdisplayValuesFor: displayValuesFor,\n\torigin: [0, 0],\n\tclassName: \"react-stockcharts-tooltip\",\n\tinteractiveMode: false,\n};\n\nexport default RSITooltip;"]}