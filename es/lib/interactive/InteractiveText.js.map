{"version":3,"sources":["../../../../src/lib/interactive/InteractiveText.js"],"names":["React","Component","PropTypes","isDefined","noop","getValueFromOverride","terminate","saveNodeType","isHoverForInteractiveType","EachText","HoverTextNearMouse","GenericChartComponent","getMouseCanvas","InteractiveText","props","handleDraw","bind","handleDrag","handleDragComplete","getSelectionState","nodes","state","index","position","setState","override","moreProps","textList","newTextList","map","each","idx","selected","onDragComplete","xyValue","current","start","end","e","enabled","mouseXY","mouseY","yScale","chartConfig","xAccessor","currentItem","invert","defaultText","onChoosePosition","newText","type","propTypes","oneOf","func","isRequired","onSelect","shape","bgFill","string","bgOpacity","number","textFill","fontFamily","fontWeight","fontStyle","fontSize","text","hoverText","object","array","bool","defaultProps","enable","bgHeight","bgWidth","contextTypes","subscribe","unsubscribe","generateSubscriptionId","chartId","oneOfType"],"mappings":"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","file":"InteractiveText.js","sourcesContent":["\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { isDefined, noop } from \"../utils\";\n\nimport {\n\tgetValueFromOverride,\n\tterminate,\n\tsaveNodeType,\n\tisHoverForInteractiveType,\n} from \"./utils\";\nimport EachText from \"./wrapper/EachText\";\nimport HoverTextNearMouse from \"./components/HoverTextNearMouse\";\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getMouseCanvas } from \"../GenericComponent\";\n\nclass InteractiveText extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleDraw = this.handleDraw.bind(this);\n\t\tthis.handleDrag = this.handleDrag.bind(this);\n\t\tthis.handleDragComplete = this.handleDragComplete.bind(this);\n\t\tthis.terminate = terminate.bind(this);\n\n\t\tthis.saveNodeType = saveNodeType.bind(this);\n\t\tthis.getSelectionState = isHoverForInteractiveType(\"textList\")\n\t\t\t.bind(this);\n\n\t\tthis.nodes = [];\n\t\tthis.state = {};\n\t}\n\thandleDrag(index, position) {\n\t\tthis.setState({\n\t\t\toverride: {\n\t\t\t\tindex,\n\t\t\t\tposition,\n\t\t\t}\n\t\t});\n\t}\n\thandleDragComplete(moreProps) {\n\t\tconst { override } = this.state;\n\t\tif (isDefined(override)) {\n\t\t\tconst { textList } = this.props;\n\t\t\tconst newTextList = textList\n\t\t\t\t.map((each, idx) => {\n\t\t\t\t\tconst selected = (idx === override.index);\n\t\t\t\t\treturn selected\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t...each,\n\t\t\t\t\t\t\tposition: override.position,\n\t\t\t\t\t\t\tselected,\n\t\t\t\t\t\t}\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t...each,\n\t\t\t\t\t\t\tselected\n\t\t\t\t\t\t};\n\t\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\toverride: null,\n\t\t\t}, () => {\n\t\t\t\tthis.props.onDragComplete(newTextList, moreProps);\n\t\t\t});\n\t\t}\n\t}\n\thandleDrawLine(xyValue) {\n\t\tconst { current } = this.state;\n\n\t\tif (isDefined(current) && isDefined(current.start)) {\n\t\t\tthis.setState({\n\t\t\t\tcurrent: {\n\t\t\t\t\tstart: current.start,\n\t\t\t\t\tend: xyValue,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleDraw(moreProps, e) {\n\t\tconst { enabled } = this.props;\n\t\tif (enabled) {\n\t\t\tconst {\n\t\t\t\tmouseXY: [, mouseY],\n\t\t\t\tchartConfig: { yScale },\n\t\t\t\txAccessor,\n\t\t\t\tcurrentItem,\n\t\t\t} = moreProps;\n\n\t\t\tconst xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n\n\t\t\tconst { defaultText, onChoosePosition } = this.props;\n\n\t\t\tconst newText = {\n\t\t\t\t...defaultText,\n\t\t\t\tposition: xyValue,\n\t\t\t};\n\t\t\tonChoosePosition(newText, moreProps, e);\n\t\t}/*  else {\n\t\t\tthis.handleClick(moreProps, e);\n\t\t} */\n\t}\n\trender() {\n\t\tconst { textList, defaultText, type } = this.props;\n\t\tconst { override } = this.state;\n\t\treturn <g>\n\t\t\t{textList.map((each, idx) => {\n\t\t\t\tconst props = {\n\t\t\t\t\t...defaultText,\n\t\t\t\t\t...each,\n\t\t\t\t\ttype,\n\t\t\t\t};\n\t\t\t\treturn <EachText\n\t\t\t\t\tkey={idx}\n\t\t\t\t\tref={this.saveNodeType(idx)}\n\t\t\t\t\tindex={idx}\n\t\t\t\t\t{...props}\n\t\t\t\t\tselected={each.selected}\n\t\t\t\t\tposition={getValueFromOverride(override, idx, \"position\", each.position)}\n\n\t\t\t\t\tonDrag={this.handleDrag}\n\t\t\t\t\tonDragComplete={this.handleDragComplete}\n\t\t\t\t\tedgeInteractiveCursor=\"react-stockcharts-move-cursor\"\n\t\t\t\t/>;\n\t\t\t})}\n\t\t\t<GenericChartComponent\n\n\t\t\t\tonClick={this.handleDraw}\n\n\t\t\t\tsvgDraw={noop}\n\t\t\t\tcanvasDraw={noop}\n\t\t\t\tcanvasToDraw={getMouseCanvas}\n\n\t\t\t\tdrawOn={[\"mousemove\", \"pan\"]}\n\t\t\t/>;\n\t\t</g>;\n\t}\n}\n\nInteractiveText.propTypes = {\n\ttype: PropTypes.oneOf([\n\t\t\"TEXT\", // extends from -Infinity to +Infinity\n\t\t\"BUBBLE\", // extends to +/-Infinity in one direction\n\t]),\n\tonChoosePosition: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tonSelect: PropTypes.func,\n\n\tdefaultText: PropTypes.shape({\n\t\tbgFill: PropTypes.string.isRequired,\n\t\tbgOpacity: PropTypes.number.isRequired,\n\t\ttextFill: PropTypes.string.isRequired,\n\t\tfontFamily: PropTypes.string.isRequired,\n\t\tfontWeight: PropTypes.string.isRequired,\n\t\tfontStyle: PropTypes.string.isRequired,\n\t\tfontSize: PropTypes.number.isRequired,\n\t\ttext: PropTypes.string.isRequired,\n\t}).isRequired,\n\n\thoverText: PropTypes.object.isRequired,\n\ttextList: PropTypes.array.isRequired,\n\tenabled: PropTypes.bool.isRequired,\n};\n\nInteractiveText.defaultProps = {\n\ttype: \"TEXT\",\n\tonChoosePosition: noop,\n\tonDragComplete: noop,\n\tonSelect: noop,\n\n\tdefaultText: {\n\t\tbgFill: \"#D3D3D3\",\n\t\tbgOpacity: 1,\n\t\ttextFill: \"#F10040\",\n\t\tfontFamily: \"Helvetica Neue, Helvetica, Arial, sans-serif\",\n\t\tfontSize: 12,\n\t\tfontStyle: \"normal\",\n\t\tfontWeight: \"normal\",\n\t\ttext: \"Text...\"\n\t},\n\thoverText: {\n\t\t...HoverTextNearMouse.defaultProps,\n\t\tenable: true,\n\t\tbgHeight: 18,\n\t\tbgWidth: 175,\n\t\ttext: \"Click and drag\",\n\t},\n\ttextList: [],\n};\n\nInteractiveText.contextTypes = {\n\tsubscribe: PropTypes.func.isRequired,\n\tunsubscribe: PropTypes.func.isRequired,\n\tgenerateSubscriptionId: PropTypes.func.isRequired,\n\tchartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n};\n\nexport default InteractiveText;\n"]}